using Microsoft.AspNetCore.Mvc;
using SistemaIndicadores.API.Data;
using SistemaIndicadores.Shared.Entities;
using Microsoft.EntityFrameworkCore;
using System.Threading.Tasks;
using System.Collections.Generic;

namespace SistemaIndicadores.API.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class CalculoIndicadoresController : ControllerBase
    {
        private readonly DataContext _context;

        public CalculoIndicadoresController(DataContext context)
        {
            _context = context;
        }

        // 游댳 Obtener todos los c치lculos de indicadores
        [HttpGet]
        public async Task<ActionResult<IEnumerable<CalculoIndicadores>>> GetCalculos()
        {
            return await _context.CalculoIndicadores.ToListAsync();
        }

        // 游댳 Obtener un c치lculo espec칤fico por ID
        [HttpGet("{id}")]
        public async Task<ActionResult<CalculoIndicadores>> GetCalculo(int id)
        {
            var calculo = await _context.CalculoIndicadores.FindAsync(id);
            if (calculo == null) return NotFound();
            return calculo;
        }

        // 游댳 Crear un nuevo c치lculo de indicador
        [HttpPost]
        public async Task<ActionResult<CalculoIndicadores>> PostCalculo(CalculoIndicadores calculo)
        {
            _context.CalculoIndicadores.Add(calculo);
            await _context.SaveChangesAsync();
            return CreatedAtAction(nameof(GetCalculo), new { id = calculo.Id }, calculo);
        }

        // 游댳 Actualizar un c치lculo existente
        [HttpPut("{id}")]
        public async Task<IActionResult> PutCalculo(int id, CalculoIndicadores calculo)
        {
            if (id != calculo.Id) return BadRequest();
            _context.Entry(calculo).State = EntityState.Modified;
            await _context.SaveChangesAsync();
            return NoContent();
        }

        // 游댳 Eliminar un c치lculo de indicador
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteCalculo(int id)
        {
            var calculo = await _context.CalculoIndicadores.FindAsync(id);
            if (calculo == null) return NotFound();
            _context.CalculoIndicadores.Remove(calculo);
            await _context.SaveChangesAsync();
            return NoContent();
        }
    }
}